// <auto-generated />
using System;
using Cards.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cards.Persistence.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20240322062504_Remove 'ValueGeneratedOnAdd' in Card and Status Configurations")]
    partial class RemoveValueGeneratedOnAddinCardandStatusConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cards.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AppUserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin46d-9e9f-44d3-8425-263ba67509aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64cf844c-4854-4d85-a8cc-5dde1e0293c4",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqLk2QidGa20vh/AEcJ1cHnc4Z7A6G2yQ/LO0NuAX1FBxZKIo/cFQjSA5mq5+eh6Q==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Adminf86-5601-41eb-a871-a660b2f0f449",
                            SecurityStamp = "d241ec4c-b764-4bf9-b41c-f0c709efaed7",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "kev5f943-112f-4d49-888d-c671e210b8b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6844f7ab-0d72-4a5d-8a10-bad5206d5f02",
                            Email = "kev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KEV@GMAIL.COM",
                            NormalizedUserName = "KEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENeI6w/qOWpxlzOdNHFWuMofUXaZ6TDgR12U/YXoTG9E2me6VgdBQYtYt0LEtQhH0g==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "c3181bd2-6f75-4ebe-9f63-63dd6b063338",
                            TwoFactorEnabled = false,
                            UserName = "kev@gmail.com"
                        },
                        new
                        {
                            Id = "suee8ebc-7959-4591-b86c-da19d3630419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9bcfc37-2887-49f4-ac43-501f0300dae8",
                            Email = "sue@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUE@GMAIL.COM",
                            NormalizedUserName = "SUE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPtgwSqy2czM3kXMEHUr/quHfSVcVVoRbtjKi1sEi5JfSdEJaTQ2lQN3XF3Ojyp/hw==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "4f563bb6-e29d-4dd5-a42a-b04a8773c670",
                            TwoFactorEnabled = false,
                            UserName = "sue@gmail.com"
                        },
                        new
                        {
                            Id = "sam172c6-46e5-4b40-a0a7-54f2424c7791",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8b09a29-44e0-440b-81cb-0b1cac8e7088",
                            Email = "sam@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAM@GMAIL.COM",
                            NormalizedUserName = "SAM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKd7NaXg36Ue4kt07Xo06ida34Zd4i3yK7hOnNR6QHUrcC/MGgY/p5Xtre9HkpntKg==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "ffe60348-93db-4d8e-9842-b4f9b26dee9f",
                            TwoFactorEnabled = false,
                            UserName = "sam@gmail.com"
                        },
                        new
                        {
                            Id = "ben8c400-aa14-4fb9-868e-1202d25bff95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d530089-7ebd-4c72-a646-d844dfa105a7",
                            Email = "ben@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEN@GMAIL.COM",
                            NormalizedUserName = "BEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFg2WZKjj1cqxLkUSzvzX0YMu18M5zuGK3ISAp5+eBOUTK9uTbLKYsXOcv+in+ylTQ==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "70a3513f-afae-4dea-92f4-25ee44fd5a13",
                            TwoFactorEnabled = false,
                            UserName = "ben@gmail.com"
                        },
                        new
                        {
                            Id = "elide650-28ea-4df1-bfc4-6b3e9a03d0de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7cae045-d203-4a48-b5ea-a4b4168be7c3",
                            Email = "elie@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELI@GMAIL.COM",
                            NormalizedUserName = "ELI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBUIDhlYr22HjQmxaQcsb+Cjn/pvOJLX6X9+d/lk4jJxdU9ZBaVgmCh/ZQkOCDOy3Q==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "28529636-1162-43fe-b5ec-b462aca346c2",
                            TwoFactorEnabled = false,
                            UserName = "elie@gmail.com"
                        });
                });

            modelBuilder.Entity("Cards.Domain.Entities.Card", b =>
                {
                    b.Property<string>("CardId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CardId");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("CardId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardId = "fixbugs2-cd1d-43cd-b997-71a7f2a20096",
                            AppUserId = "kev5f943-112f-4d49-888d-c671e210b8b8",
                            Color = "#ADD8E6",
                            DateOfCreation = new DateTime(2024, 1, 20, 20, 37, 19, 0, DateTimeKind.Utc),
                            Description = "The system has bags to be fixed",
                            Name = "Fix bugs",
                            StatusId = "Todo343d-f8ec-4197-b0b2-f3365f71f2e2"
                        },
                        new
                        {
                            CardId = "systemInstallation-8fae-7488fc2c1b95",
                            AppUserId = "kev5f943-112f-4d49-888d-c671e210b8b8",
                            Color = "#FF7F50",
                            DateOfCreation = new DateTime(2024, 1, 15, 20, 37, 19, 0, DateTimeKind.Utc),
                            Description = "Installation of system to the new client.",
                            Name = "System Installation",
                            StatusId = "InProgress643-4e2e-bba7-8ebebb32d606"
                        },
                        new
                        {
                            CardId = "updateDatabase-f8a1-49e2-b7ab-2f5c6d73c93d",
                            AppUserId = "kev5f943-112f-4d49-888d-c671e210b8b8",
                            Color = "#32CD32",
                            DateOfCreation = new DateTime(2024, 2, 5, 15, 20, 0, 0, DateTimeKind.Utc),
                            Description = "Perform necessary updates on the database.",
                            Name = "Update Database",
                            StatusId = "InProgress643-4e2e-bba7-8ebebb32d606"
                        },
                        new
                        {
                            CardId = "clientMeeting-2f9e-4681-a499-4a2d1b2e36e4",
                            AppUserId = "kev5f943-112f-4d49-888d-c671e210b8b8",
                            Color = "#800080",
                            DateOfCreation = new DateTime(2024, 2, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Schedule a meeting with the client to discuss project updates.",
                            Name = "Client Meeting",
                            StatusId = "Todo343d-f8ec-4197-b0b2-f3365f71f2e2"
                        },
                        new
                        {
                            CardId = "updateDatabase-9c1f-4e7d-8737-d1f4e1ef5933",
                            AppUserId = "suee8ebc-7959-4591-b86c-da19d3630419",
                            Color = "#FFA500",
                            DateOfCreation = new DateTime(2024, 2, 20, 10, 15, 0, 0, DateTimeKind.Utc),
                            Description = "Apply patches and optimize database performance.",
                            Name = "Update Database",
                            StatusId = "Todo343d-f8ec-4197-b0b2-f3365f71f2e2"
                        },
                        new
                        {
                            CardId = "clientMeeting-7c8a-4a7d-9533-56a21b5c92e1",
                            AppUserId = "suee8ebc-7959-4591-b86c-da19d3630419",
                            Color = "#4682B4",
                            DateOfCreation = new DateTime(2024, 2, 25, 14, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Discuss project milestones and deliverables with the client.",
                            Name = "Client Meeting",
                            StatusId = "InProgress643-4e2e-bba7-8ebebb32d606"
                        },
                        new
                        {
                            CardId = "clientMeeting-6c72-45fe-a7bf-4cd6d1d90c91",
                            AppUserId = "suee8ebc-7959-4591-b86c-da19d3630419",
                            Color = "#8A2BE2",
                            DateOfCreation = new DateTime(2024, 3, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Review project scope and timeline with the client.",
                            Name = "Client Meeting",
                            StatusId = "Todo343d-f8ec-4197-b0b2-f3365f71f2e2"
                        });
                });

            modelBuilder.Entity("Cards.Domain.Entities.Status", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("StatusId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("StatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = "Todo343d-f8ec-4197-b0b2-f3365f71f2e2",
                            Name = "ToDo"
                        },
                        new
                        {
                            StatusId = "InProgress643-4e2e-bba7-8ebebb32d606",
                            Name = "In Progress"
                        },
                        new
                        {
                            StatusId = "Done83ea-b4c1-4107-a66b-da86fcecf73f",
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cards.Domain.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "Adminf86-5601-41eb-a871-a660b2f0f449",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("Cards.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Cards.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cards.Domain.Entities.Card", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Cards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cards.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cards.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
