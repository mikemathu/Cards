// <auto-generated />
using System;
using Cards.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cards.Persistence.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20240319105931_Update appUser RoleIds in AppUserConfiguration")]
    partial class UpdateappUserRoleIdsinAppUserConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cards.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AppUserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin46d-9e9f-44d3-8425-263ba67509aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f127bd5a-666e-41d4-bd3e-c2b80d735645",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAePdReFst0++ptiYB3+e5LQsAekQrqyQ4sFY7TpbAzCkQ/NTiwlzX7Uge252qOw6w==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Adminf86-5601-41eb-a871-a660b2f0f449",
                            SecurityStamp = "7a850996-98bc-477f-92d5-c37aa929f242",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "kev5f943-112f-4d49-888d-c671e210b8b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c03ed726-c556-42f2-8f9f-7eea70a12ca3",
                            Email = "kev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KEV@GMAIL.COM",
                            NormalizedUserName = "KEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMvv4j9lqEEUQa0lZPrb2r4n+vq3JTYG84ZjVLH/juE4gt7J+NKjz7WHTy7/MyZqQ==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "c15be853-9568-4d14-9b32-8149df658ae7",
                            TwoFactorEnabled = false,
                            UserName = "kev@gmail.com"
                        },
                        new
                        {
                            Id = "suee8ebc-7959-4591-b86c-da19d3630419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d2e0819-8469-4dc1-b296-c06b7ba87018",
                            Email = "sue@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUE@GMAIL.COM",
                            NormalizedUserName = "SUE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXMNS592htiImnmHoxNFdb2+z2aJsd/SoO+PQYz5VeET7A/73Cc2y7qCWabfXsi0g==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "a399d6e3-53eb-4df4-b528-e96cb7004f1d",
                            TwoFactorEnabled = false,
                            UserName = "sue@gmail.com"
                        },
                        new
                        {
                            Id = "sam172c6-46e5-4b40-a0a7-54f2424c7791",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a43a81b-ad78-45fc-b1a2-a209dd77d82e",
                            Email = "sam@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAM@GMAIL.COM",
                            NormalizedUserName = "SAM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRu2GWXPXr6Rxl3f+ZrZeyZZhRfMQosGuLIyLg1RVbxrLvnqJB4X9JLFbVrMDBdKA==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "b1d77394-be51-49c1-836b-400d76e10fdf",
                            TwoFactorEnabled = false,
                            UserName = "sam@gmail.com"
                        },
                        new
                        {
                            Id = "ben8c400-aa14-4fb9-868e-1202d25bff95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "075992e2-6777-45f5-943c-113dd148d903",
                            Email = "ben@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEN@GMAIL.COM",
                            NormalizedUserName = "BEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHdxD2f+cargF0YBlnsj6S62lsXkRvxxOkr8vGRS8//EeS23YR3d6WMj0+U0VSjU2A==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "aa21b882-e17c-4e29-98d0-fee8d2c6fc08",
                            TwoFactorEnabled = false,
                            UserName = "ben@gmail.com"
                        },
                        new
                        {
                            Id = "elide650-28ea-4df1-bfc4-6b3e9a03d0de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2377286-5ec3-405f-b816-08a1592bf69f",
                            Email = "elie@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELI@GMAIL.COM",
                            NormalizedUserName = "ELI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEww/SpInE6WIGQ8LdEZfwbVZhY/yvGPKzkJ6GHOV7emfCXP2frpctNoNQjELwInkw==",
                            PhoneNumberConfirmed = false,
                            RoleId = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            SecurityStamp = "808634c4-3479-436b-b766-42a259d6952e",
                            TwoFactorEnabled = false,
                            UserName = "elie@gmail.com"
                        });
                });

            modelBuilder.Entity("Cards.Domain.Entities.Card", b =>
                {
                    b.Property<string>("CardId")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("CardId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Cards.Domain.Entities.CardStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("StatusId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("StatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = "Todo343d-f8ec-4197-b0b2-f3365f71f2e2",
                            Name = "ToDo"
                        },
                        new
                        {
                            StatusId = "InProgress643-4e2e-bba7-8ebebb32d606",
                            Name = "In Progress"
                        },
                        new
                        {
                            StatusId = "Done83ea-b4c1-4107-a66b-da86fcecf73f",
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cards.Domain.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "Adminf86-5601-41eb-a871-a660b2f0f449",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "Member8a-19f1-430e-aba5-9082dacfa9dd",
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("Cards.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Cards.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cards.Domain.Entities.Card", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Cards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cards.Domain.Entities.CardStatus", "CardStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("CardStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cards.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cards.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
