<div id="cardContainer"></div>

<script>

    function showLoader() {
        document.getElementById('loader').style.display = 'block';
    }

    function hideLoader() {
        document.getElementById('loader').style.display = 'none';
    }


    //const userId = 'kev5f943-112f-4d49-888d-c671e210b8b8';
    const userId = 'admin46d-9e9f-44d3-8425-263ba67509aa';
    const endpoint = `https://localhost:7265/api/appUsers/${userId}/cards/all`;

    const token = localStorage.getItem('token') || sessionStorage.getItem('token');
 
    fetchData();


    ///function fetchData({ pagination = {}, sort = {}, filter = {} }) {


    function fetchData(options = {}) {
        showLoader();

        let url = `${endpoint}?`;

        // Pagination
        if (options.pagination) {
            const { pageNumber } = options.pagination;

            // Get the select element
            const perPageSelect = document.getElementById('perPageSelect');

            // Get the selected option's value
            const selectedPageSize = perPageSelect.value;

            // Get the value of the default option
            const defaultValue = perPageSelect.options[0].value;

            // Append pageSize to the URL if a different option is selected
            if (selectedPageSize !== defaultValue) {
                url += `&pageSize=${selectedPageSize}`;
            }

            if (pageNumber) {
                url += `&pageNumber=${pageNumber}`;
            }
        }

        if (options.sort) {
            url += `&orderBy=${sortByString}`;
       }

        // Filtering
        if (options.filter) {
            const { name, color, status, dateOfCreation } = options.filter;
            if (name) url += `&name=${name}`;
            if (color) url += `&color=${color}`;
            if (status) url += `&status=${status}`;
            if (dateOfCreation) url += `&dateOfCreation=${dateOfCreation}`;
        }
       

        // Remove leading '&' if there are query parameters
        if (url.endsWith('?')) {
            url = url.slice(0, -1);
        }

        fetch(url, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Get pagination data from response headers
                const paginationData = JSON.parse(response.headers.get('X-Pagination'));

                // Update UI with pagination info
                // Calculate 'from' and 'to' dynamically based on pagination data
                const { CurrentPage, PageSize, TotalCount } = paginationData;
                const from = (CurrentPage - 1) * PageSize + 1;
                const to = Math.min(CurrentPage * PageSize, TotalCount);

                // Update UI with pagination info
                const paginationInfoElement = document.getElementById('paginationInfo');
                paginationInfoElement.textContent = `Showing ${from}-${to} of ${TotalCount} cards`;

                // Dynamically generate dropdown options based on pagination data
                generatePaginationLinks(paginationData);

                return response.json();
            })
            .then(data => {
                // Generate HTML for each card object in the data array
                const cardHtml = data.map(card => `
                                <div class="card mb-3" style="background-color: ${card.color}">
                                    <div class="card-body">
                                        <h5 class="card-title">${card.name}</h5>
                                        <p class="card-text">${card.description}</p>
                                        <p class="card-text">Created By: ${card.createdByAppUser}</p>
                                        <p class="card-text">Status: ${card.status}</p>
                                        <p class="card-text">Date of Creation: ${new Date(card.dateOfCreation).toLocaleString()}</p>
                                    </div>
                                </div>
                            `).join('');

                // Insert the generated HTML into the cardContainer element
                document.getElementById('cardContainer').innerHTML = cardHtml;
                hideLoader()

            })
            .catch(error => {
                console.error('There was a problem fetching the data:', error);
                hideLoader()
            });
    }

    // Function to generate pagination links dynamically
    function generatePaginationLinks(paginationData) {
        const paginationNav = document.getElementById('paginationNav');
        paginationNav.innerHTML = ''; // Clear existing pagination links


        // Check if there is only one page
        if (paginationData.TotalPages === 1) {
            return; // Exit the function early
        }

        // Add Previous page link if available
        if (paginationData.HasPrevious) {
            paginationNav.innerHTML += `
                <li class="page-item">
                       <a class="page-link" href="#" onclick="handlePerPageSelectChange({ pagination: { pageNumber: ${paginationData.CurrentPage - 1} } })">Previous</a>
                </li>`;
        } else {
            paginationNav.innerHTML += `
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                </li>`;
        }

        // Add first page link
        paginationNav.innerHTML += `
            <li class="page-item ${1 === paginationData.CurrentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="handlePerPageSelectChange({ pagination: { pageNumber: 1 } })">1</a>
            </li>`;

        // Add ellipsis if needed
        if (paginationData.CurrentPage > 4) {
            paginationNav.innerHTML += `
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">...</a>
                </li>`;
        }

        // Add sequential pages
        for (let i = Math.max(2, paginationData.CurrentPage - 2); i <= Math.min(paginationData.TotalPages - 1, paginationData.CurrentPage + 2); i++) {
            paginationNav.innerHTML += `
                <li class="page-item ${i === paginationData.CurrentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="handlePerPageSelectChange({ pagination: { pageNumber: ${i} } })">${i}</a>
                </li>`;
        }

        // Add ellipsis on the right side if needed
        if (paginationData.TotalPages - paginationData.CurrentPage > 3) {
            paginationNav.innerHTML += `
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">...</a>
                </li>`;
        }

        // Add last page link
       paginationNav.innerHTML += `
            <li class="page-item ${paginationData.TotalPages === paginationData.CurrentPage  ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="handlePerPageSelectChange({ pagination: { pageNumber: ${paginationData.TotalPages} } })">${paginationData.TotalPages}</a>
            </li>`;
      

        // Add Next page link if available
        if (paginationData.HasNext) {
            paginationNav.innerHTML += `
            <li class="page-item">
                    <a class="page-link" href="#" onclick="handlePerPageSelectChange({ pagination: { pageNumber: ${paginationData.CurrentPage + 1} } })">Next</a>
            </li>`;
        } else {
            paginationNav.innerHTML += `
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Next</a>
            </li>`;
        }
    }
    ///////
    //Drop Down
    //////

    // Fetch initial data and generate dropdown options when the page loads
    document.addEventListener('DOMContentLoaded', function () {

        showLoader();

        fetch(endpoint, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not okk');
                }
                // Get pagination data from response headers
                const paginationData = JSON.parse(response.headers.get('X-Pagination'));

                // Dynamically generate dropdown options based on pagination data
                generateDropdownOptions(paginationData);

                hideLoader();

            })
            .catch(error => {
                console.error('There was a problem fetching the initial data:', error);
                hideLoader();
            });
    });

    // Function to generate dropdown options based on pagination data
    function generateDropdownOptions(paginationData) {
        if (!paginationData || !paginationData.TotalCount || !paginationData.PageSize) return;
        const perPageSelect = document.getElementById('perPageSelect');
        const pageCount = Math.ceil(paginationData.TotalCount / paginationData.PageSize);
        for (let i = 1; i <= pageCount; i++) {
            const option = document.createElement('option');
            option.value = paginationData.PageSize * i;
            option.textContent = `Show ${paginationData.PageSize * i}`;
            perPageSelect.appendChild(option);
        }
    }

    // Event listener for dropdown change
    document.getElementById('perPageSelect').addEventListener('change', function (event) {
        const perPagepageSize = event.target.value;
        //fetchData({ pagination: { pageSize: pageSize } });
        //handlePerPageSelectChange(pageSize);
        handlePerPageSelectChange({ pagination: { pageSize: perPagepageSize } } );
    });

   


 

   
  //Sorting
  /*  document.querySelectorAll('input[name="sortOption"]').forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            // Initialize options object
            const options = {
                sort: {
                    orderBy: [] // Initialize an array to store sorting fields
                }
            };

            // Check which checkboxes are checked and update options accordingly
            document.querySelectorAll('input[name="sortOption"]:checked').forEach(checkedCheckbox => {
                const value = checkedCheckbox.value;
                const id = checkedCheckbox.id;

                // Remove opposite sort option if it exists
                const oppositeSortOption = value.endsWith(' desc') ? value.slice(0, -5) : value + ' desc';
                const oppositeIndex = options.sort.orderBy.indexOf(oppositeSortOption);
                if (oppositeIndex !== -1) {
                    options.sort.orderBy.splice(oppositeIndex, 1);
                }

                // Push the current sort option to the array
                options.sort.orderBy.push(value);
            });

            // Concatenate sort options into a single string
            const sortString = options.sort.orderBy.join(',');

            // Call fetchData function with updated options
            //fetchData(options);
            //fetchData(sortString);
            //handlePerPageSelectChange(sortString :sortString);
            handlePerPageSelectChange(undefined, sortString, undefined,);


            // If all checkboxes are checked, log the concatenated string
           /* if (options.sort.sortBy.length === document.querySelectorAll('input[name="sortOption"]').length) {
                console.log(sortString);
            }
        });
    }); 
    */

   //sorting
    // Define a function to update the sorting values based on the checked checkboxes
    function updateSortString() {
        const options = {
            sort: {
                orderByString: []
            }
        };

        document.querySelectorAll('input[name="sortOption"]:checked').forEach(checkedCheckbox => {
            const value = checkedCheckbox.value;
            const oppositeSortOption = value.endsWith(' desc') ? value.slice(0, -5) : value + ' desc';
            const oppositeIndex = options.sort.orderByString.indexOf(oppositeSortOption);
            if (oppositeIndex !== -1) {
                options.sort.orderByString.splice(oppositeIndex, 1);
            }
            options.sort.orderByString.push(value);
        });

        return options.sort.orderByString.join(',');
    }

    // Attach event listener to checkboxes to update sorting values
    document.querySelectorAll('input[name="sortOption"]').forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            const sortString = updateSortString();
            handlePerPageSelectChange(undefined, sortString);
        });
    });


  
    //filter
    document.addEventListener('DOMContentLoaded', () => {
        // Add event listeners to filter input fields
        const nameInput = document.getElementById('filterByName');
        const colorInput = document.getElementById('color-picker');
        const statusSelect = document.getElementById('filterByStatus');
        const dateInput = document.getElementById('filterByDateOfCreation');

        nameInput.addEventListener('input', filterDataOptions);
        colorInput.addEventListener('input', filterDataOptions);
        statusSelect.addEventListener('change', filterDataOptions);
        dateInput.addEventListener('change', filterDataOptions);
    });

    function filterDataOptions() {
        // Get filter values
        const name = document.getElementById('filterByName').value;
       // const color = document.getElementById('color-picker').value;
        const color = document.getElementById('filterByColor').value;
        const status = document.getElementById('filterByStatus').value;
        const dateOfCreation = document.getElementById('filterByDateOfCreation').value;

        // Call fetchData function with filter options
        
            filter: {
                name,
                color,
                status,
                dateOfCreation
            }
        
        handlePerPageSelectChange(undefined, undefined, { filter: { name: name, color: color, status: status, dateOfCreation: dateOfCreation } });

    }


    function handlePerPageSelectChange( pagination = {} , sortString = null, filterOption = {}) {
        // Read values for pagination, sorting, and filtering options from the DOM
        //let pageSize = pagination.pageSize;
        let { pageSize } = pagination;
        let name = filterOption.filter ? filterOption.filter.name : null;
        let color = filterOption.filter ? filterOption.filter.color : null;
        let status = filterOption.filter ? filterOption.filter.status : null;
        let dateOfCreation = filterOption.filter ? filterOption.filter.dateOfCreation : null;

        if (pagination === null || Object.keys(pagination).length === 0) {
            pageSize = 18;
        }

        if (sortString === null) {
            sortString = updateSortString();
        }

        if (filterOption === null || Object.keys(filterOption).length === 0) {
            name = document.getElementById('filterByName').value;
            color = document.getElementById('filterByColor').value;
            status = document.getElementById('filterByStatus').value;
            dateOfCreation = document.getElementById('filterByDateOfCreation').value;
        }

        // Create pagination, sorting, and filtering options objects
        const paginationObj = { pageSize: pageSize };
        const filterObj = { filter: { name, color, status, dateOfCreation } };

        // Call fetchData with the collected options
        fetchData({ ...paginationObj, sort: sortString, ...filterObj });
    }






    //color picker
    // Get references to the input fields
    const filterByColorInput = document.getElementById('filterByColor');
    const colorPickerInput = document.getElementById('color-picker');

    // Add event listener to color picker input field
    colorPickerInput.addEventListener('input', function () {
        // Update the value of the filterByColor input field with the selected color
        filterByColorInput.value = colorPickerInput.value;
    });







</script> 